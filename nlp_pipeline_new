{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3337a5f3",
   "metadata": {},
   "source": [
    "# DIS25 Natural Language Processing\n",
    "### Untersuchung Gender Bias im Deutschen Bundestag  \n",
    "\n",
    "Gruppe: Dennis Depoi, Leonie Schulz, Annemarie Szyprons, Melanie Ullrich  \n",
    "Gruppenname: MüssenWirÜberlegen  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2e883d",
   "metadata": {},
   "source": [
    "### 1. Initialisieren"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ad718c1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\annes\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\annes\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\annes\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package omw-1.4 to\n",
      "[nltk_data]     C:\\Users\\annes\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     C:\\Users\\annes\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# settings, imports & downloads\n",
    "\n",
    "import pandas as pd\n",
    "import os\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "import numpy as np\n",
    "import nltk\n",
    "import matplotlib.pyplot as plt\n",
    "from textblob_de import TextBlobDE as TextBlob\n",
    "nltk.download('punkt')\n",
    "\n",
    "nltk.download(\"stopwords\")\n",
    "nltk.download(\"wordnet\")\n",
    "nltk.download(\"omw-1.4\")\n",
    "nltk.download(\"averaged_perceptron_tagger\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f6bf94c",
   "metadata": {},
   "source": [
    "### 2. Einlesen der Daten"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59b5677f",
   "metadata": {},
   "source": [
    "#### 2.1. Plenarprotokolle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "224fe94e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read xml files\n",
    "folder_path = \"Plenarprotokolle/17\"\n",
    "files_in_folder = os.listdir(folder_path)\n",
    "\n",
    "result = []\n",
    "\n",
    "for file in files_in_folder:\n",
    "    soup = BeautifulSoup(open(folder_path + \"/\" + file, \"r\", encoding=\"utf-8\"), \"xml\")\n",
    "    d = {}\n",
    "    for tag in soup.find_all(recursive=True):\n",
    "        d[tag.name] = tag.get_text(strip=True)\n",
    "        result.append(d)\n",
    "        \n",
    "df = pd.DataFrame(result) # write in dataframe\n",
    "df = df.drop_duplicates() # remove duplicated rows from dataframe\n",
    "df = df.drop(columns = \"DOKUMENT\") # remove redundant column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7ddb02fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAHLPERIODE</th>\n",
       "      <th>DOKUMENTART</th>\n",
       "      <th>NR</th>\n",
       "      <th>DATUM</th>\n",
       "      <th>TITEL</th>\n",
       "      <th>TEXT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/1</td>\n",
       "      <td>27.10.2009</td>\n",
       "      <td>Plenarprotokoll vom 27.10.2009</td>\n",
       "      <td>Plenarprotokoll 17/1\\nDeutscher Bundestag\\nSte...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/2</td>\n",
       "      <td>28.10.2009</td>\n",
       "      <td>Plenarprotokoll vom 28.10.2009</td>\n",
       "      <td>Plenarprotokoll 17/2\\nDeutscher Bundestag\\nSte...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/3</td>\n",
       "      <td>10.11.2009</td>\n",
       "      <td>Plenarprotokoll vom 10.11.2009</td>\n",
       "      <td>Plenarprotokoll 17/3\\nDeutscher Bundestag\\nSte...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/4</td>\n",
       "      <td>11.11.2009</td>\n",
       "      <td>Plenarprotokoll vom 11.11.2009</td>\n",
       "      <td>Plenarprotokoll 17/4\\nDeutscher Bundestag\\nSte...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/5</td>\n",
       "      <td>12.11.2009</td>\n",
       "      <td>Plenarprotokoll vom 12.11.2009</td>\n",
       "      <td>Plenarprotokoll 17/5\\nDeutscher Bundestag\\nSte...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1736</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/249</td>\n",
       "      <td>26.06.2013</td>\n",
       "      <td>Plenarprotokoll vom 26.06.2013</td>\n",
       "      <td>Plenarprotokoll 17/249\\nDeutscher Bundestag\\nS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/250</td>\n",
       "      <td>27.06.2013</td>\n",
       "      <td>Plenarprotokoll vom 27.06.2013</td>\n",
       "      <td>Plenarprotokoll 17/250Plenarprotokoll 17/250\\n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1750</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/251</td>\n",
       "      <td>28.06.2013</td>\n",
       "      <td>Plenarprotokoll vom 28.06.2013</td>\n",
       "      <td>Plenarprotokoll 17/251\\nDeutscher Bundestag\\nS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1757</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/252</td>\n",
       "      <td>02.09.2013</td>\n",
       "      <td>Plenarprotokoll vom 02.09.2013</td>\n",
       "      <td>Plenarprotokoll 17/252\\nDeutscher Bundestag\\nS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1764</th>\n",
       "      <td>17</td>\n",
       "      <td>PLENARPROTOKOLL</td>\n",
       "      <td>17/253</td>\n",
       "      <td>03.09.2013</td>\n",
       "      <td>Plenarprotokoll vom 03.09.2013</td>\n",
       "      <td>Plenarprotokoll 17/253\\nDeutscher Bundestag\\nS...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>253 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     WAHLPERIODE      DOKUMENTART      NR       DATUM  \\\n",
       "0             17  PLENARPROTOKOLL    17/1  27.10.2009   \n",
       "7             17  PLENARPROTOKOLL    17/2  28.10.2009   \n",
       "14            17  PLENARPROTOKOLL    17/3  10.11.2009   \n",
       "21            17  PLENARPROTOKOLL    17/4  11.11.2009   \n",
       "28            17  PLENARPROTOKOLL    17/5  12.11.2009   \n",
       "...          ...              ...     ...         ...   \n",
       "1736          17  PLENARPROTOKOLL  17/249  26.06.2013   \n",
       "1743          17  PLENARPROTOKOLL  17/250  27.06.2013   \n",
       "1750          17  PLENARPROTOKOLL  17/251  28.06.2013   \n",
       "1757          17  PLENARPROTOKOLL  17/252  02.09.2013   \n",
       "1764          17  PLENARPROTOKOLL  17/253  03.09.2013   \n",
       "\n",
       "                               TITEL  \\\n",
       "0     Plenarprotokoll vom 27.10.2009   \n",
       "7     Plenarprotokoll vom 28.10.2009   \n",
       "14    Plenarprotokoll vom 10.11.2009   \n",
       "21    Plenarprotokoll vom 11.11.2009   \n",
       "28    Plenarprotokoll vom 12.11.2009   \n",
       "...                              ...   \n",
       "1736  Plenarprotokoll vom 26.06.2013   \n",
       "1743  Plenarprotokoll vom 27.06.2013   \n",
       "1750  Plenarprotokoll vom 28.06.2013   \n",
       "1757  Plenarprotokoll vom 02.09.2013   \n",
       "1764  Plenarprotokoll vom 03.09.2013   \n",
       "\n",
       "                                                   TEXT  \n",
       "0     Plenarprotokoll 17/1\\nDeutscher Bundestag\\nSte...  \n",
       "7     Plenarprotokoll 17/2\\nDeutscher Bundestag\\nSte...  \n",
       "14    Plenarprotokoll 17/3\\nDeutscher Bundestag\\nSte...  \n",
       "21    Plenarprotokoll 17/4\\nDeutscher Bundestag\\nSte...  \n",
       "28    Plenarprotokoll 17/5\\nDeutscher Bundestag\\nSte...  \n",
       "...                                                 ...  \n",
       "1736  Plenarprotokoll 17/249\\nDeutscher Bundestag\\nS...  \n",
       "1743  Plenarprotokoll 17/250Plenarprotokoll 17/250\\n...  \n",
       "1750  Plenarprotokoll 17/251\\nDeutscher Bundestag\\nS...  \n",
       "1757  Plenarprotokoll 17/252\\nDeutscher Bundestag\\nS...  \n",
       "1764  Plenarprotokoll 17/253\\nDeutscher Bundestag\\nS...  \n",
       "\n",
       "[253 rows x 6 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdc3de4b",
   "metadata": {},
   "source": [
    "#### 2.2. Stammdaten "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b6af92b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "gender_df = pd.read_csv(\"DIS25_liste_gender.csv\", delimiter=\";\") # read csv file of the names, parties and genders\n",
    "# transform into lists\n",
    "names = gender_df[\"Vorname_Nachname\"].tolist()\n",
    "geschlechter = gender_df[\"Geschlecht\"].tolist()\n",
    "partei = gender_df[\"Fraktion\"].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aadf7331",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Vorname_Nachname</th>\n",
       "      <th>Nachname</th>\n",
       "      <th>Vorname</th>\n",
       "      <th>Geschlecht</th>\n",
       "      <th>Fraktion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jens Ackermann</td>\n",
       "      <td>Ackermann</td>\n",
       "      <td>Jens</td>\n",
       "      <td>m</td>\n",
       "      <td>FDP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Christian Ahrendt</td>\n",
       "      <td>Ahrendt</td>\n",
       "      <td>Christian</td>\n",
       "      <td>m</td>\n",
       "      <td>FDP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ilse Aigner</td>\n",
       "      <td>Aigner</td>\n",
       "      <td>Ilse</td>\n",
       "      <td>f</td>\n",
       "      <td>CDU/CSU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Jan van Aken</td>\n",
       "      <td>van Aken</td>\n",
       "      <td>Jan</td>\n",
       "      <td>m</td>\n",
       "      <td>DIE LINKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Agnes Alpers</td>\n",
       "      <td>Alpers</td>\n",
       "      <td>Agnes</td>\n",
       "      <td>f</td>\n",
       "      <td>DIE LINKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>647</th>\n",
       "      <td>Sabine Zimmermann</td>\n",
       "      <td>Zimmermann</td>\n",
       "      <td>Sabine</td>\n",
       "      <td>f</td>\n",
       "      <td>DIE LINKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>648</th>\n",
       "      <td>Wolfgang Zöller</td>\n",
       "      <td>Zöller</td>\n",
       "      <td>Wolfgang</td>\n",
       "      <td>m</td>\n",
       "      <td>CDU/CSU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>649</th>\n",
       "      <td>Manfred Helmut Zöllmer</td>\n",
       "      <td>Zöllmer</td>\n",
       "      <td>Manfred Helmut</td>\n",
       "      <td>m</td>\n",
       "      <td>SPD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>650</th>\n",
       "      <td>Willi Zylajew</td>\n",
       "      <td>Zylajew</td>\n",
       "      <td>Willi</td>\n",
       "      <td>m</td>\n",
       "      <td>CDU/CSU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>Brigitte Zypries</td>\n",
       "      <td>Zypries</td>\n",
       "      <td>Brigitte</td>\n",
       "      <td>f</td>\n",
       "      <td>SPD</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>652 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Vorname_Nachname    Nachname         Vorname Geschlecht   Fraktion\n",
       "0            Jens Ackermann   Ackermann            Jens          m        FDP\n",
       "1         Christian Ahrendt     Ahrendt       Christian          m        FDP\n",
       "2               Ilse Aigner      Aigner            Ilse          f    CDU/CSU\n",
       "3              Jan van Aken    van Aken             Jan          m  DIE LINKE\n",
       "4              Agnes Alpers      Alpers           Agnes          f  DIE LINKE\n",
       "..                      ...         ...             ...        ...        ...\n",
       "647       Sabine Zimmermann  Zimmermann          Sabine          f  DIE LINKE\n",
       "648         Wolfgang Zöller      Zöller        Wolfgang          m    CDU/CSU\n",
       "649  Manfred Helmut Zöllmer     Zöllmer  Manfred Helmut          m        SPD\n",
       "650           Willi Zylajew     Zylajew           Willi          m    CDU/CSU\n",
       "651        Brigitte Zypries     Zypries        Brigitte          f        SPD\n",
       "\n",
       "[652 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28fcd123",
   "metadata": {},
   "source": [
    "### 3. Datentransformation  \n",
    "Der Protokolltext wird in eine neue Spalte `TEXT_SPLIT` übertragen. Der eigentliche Protokollinhalt beginnt bei `Beginn` und endet bei `Schluss`. Anhand dieser Merkmale wird der Text getrennt. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e1d164f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# split column \"TEXT\" and add only the important text into new column and the participants\n",
    "conversation = []\n",
    "pattern_start = \"Beginn:\"\n",
    "pattern_end = \"Schluss:\"\n",
    "\n",
    "for row in df[\"TEXT\"]:\n",
    "    rowstr = str(row).split(pattern_start)\n",
    "    conversation.append(rowstr[1])\n",
    "\n",
    "df[\"TEXT_SPLIT\"] = conversation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30d215c5",
   "metadata": {},
   "source": [
    "Die Spalte `TEXT_SPLIT` wird zu Beginn gereinigt, indem Absätze und doppelte Leerzeichen und einige Titel entfernt werden."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "89419914",
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean data\n",
    "df[\"TEXT_SPLIT\"] = df.apply(lambda row: re.sub(\"(\\n)|(\\r)|(\\s+)\", \" \", row[\"TEXT_SPLIT\"]), axis=1) # remove returns in data\n",
    "df[\"TEXT_SPLIT\"] = df.apply(lambda row: re.sub(\"-\\s\", \"\", row[\"TEXT_SPLIT\"]), axis=1) # remove separate words with hyphen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0a74569",
   "metadata": {},
   "source": [
    "#### 3.1. Erstellen eines Sub-Dataframes zur Erweiterung der Daten\n",
    "Die Textdaten werden in weitere Spalten untergliedert, die den Redebeitrag, die vortragende Person sowie die Unterbrechung beinhalten."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b9e59858",
   "metadata": {},
   "outputs": [],
   "source": [
    "# write the components of speaker, speech and interruption\n",
    "Sub = set() # only unique values in set to avoid the same text with different name\n",
    "\n",
    "for row in df[\"TEXT_SPLIT\"]:\n",
    "    for i in names:\n",
    "        x = str(i) + \":\"\n",
    "        if x in row:\n",
    "            name = x\n",
    "            start = str(row).index(name) # speach starts with name + : \n",
    "            end = row.index(\")\", start+1) # speach ends when first interruption starts in brackets \n",
    "            substring = row[start-1:end+1]\n",
    "            Sub.add(substring)\n",
    "        else:\n",
    "            # if the substring has no name in it, it is the speach of the speaker before the new substring\n",
    "            # because sometimes the speach will go on without calling the name in the protocol again\n",
    "            start = str(row).index(\")\") # speach starts with closed brackets\n",
    "            end = row.index(\")\", start+1) # speach ends when second interruption starts in brackets \n",
    "            substring = row[start+2:end+1] # substring without name\n",
    "            if len(Sub) > 0:\n",
    "                last_element = str(list(Sub)[-1]) # last speach element of Sub\n",
    "                if name in last_element:\n",
    "                    substring = name + substring # concatenate name of last speaker + speach \n",
    "                    if substring not in Sub:\n",
    "                        Sub.add(substring)\n",
    "                        \n",
    "Sub = list(Sub)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac2aa5c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1368"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(Sub)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77ef7566",
   "metadata": {},
   "source": [
    "Subdataframe wird in einem neuen Dataframe verbunden. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0b8c5aa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the components and write into new dataframe\n",
    "data = pd.DataFrame()\n",
    "Redebeitrag = []\n",
    "Person = []\n",
    "Unterbrechung = []\n",
    "\n",
    "for x in Sub:\n",
    "    string = re.split(\":\", str(x), 1) # split where : is\n",
    "    string1 = re.split(\"\\\\(|\\\\)\", str(string[1])) # split interruption when in brackets\n",
    "    Person.append(string[0])\n",
    "    Redebeitrag.append(string1[0])\n",
    "    Unterbrechung.append(string1[1])\n",
    "\n",
    "data[\"Redeinhalt\"] = Redebeitrag\n",
    "data[\"Vortragende_Person\"] = Person\n",
    "data[\"Unterbrechung\"] = Unterbrechung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d46339c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop columns where interruption is party\n",
    "for unterbrechung in data[\"Unterbrechung\"]:\n",
    "    for p in partei:\n",
    "        data.drop(data.index[data[\"Unterbrechung\"] == p], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "699175d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sometimes before interruption text, something happens - the person starts talking then after \"-\"\n",
    "char = \"–\"\n",
    "pattern  = \".*\" + char  # Regex pattern to match all characters on and before '-'\n",
    "clean_unterhaltung = []\n",
    "\n",
    "for row in data[\"Unterbrechung\"]:\n",
    "    if re.findall(pattern, row):\n",
    "        clean_str = re.sub(pattern, \"\", row) # remove all characters before the character '-' from string \n",
    "        clean_unterhaltung.append(clean_str)\n",
    "    else:\n",
    "        clean_unterhaltung.append(row)\n",
    "        \n",
    "data[\"Unterbrechung\"] = clean_unterhaltung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3d71cf2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the interruption-components and add to dataframe\n",
    "pers_unter = []\n",
    "rede_unter = []\n",
    "partei_unter = []\n",
    "\n",
    "for row in data[\"Unterbrechung\"]:\n",
    "    if re.findall(r\":\", row):\n",
    "        string = re.split(':', str(row))\n",
    "        str_pers = re.split(\"\\[\\w+.*\\/?\\w*?.\\w*\\]$\", string[0])\n",
    "        str_part = re.findall(\"\\[\\w+.*\\/?\\w*?.\\w*\\]$\", string[0])\n",
    "        if len(str_part) > 0:\n",
    "            str_part = re.sub(\"\\[?\\]?\", \"\", str_part[0]) # remove [] brackets\n",
    "        pers_unter.append(str_pers[0])\n",
    "        rede_unter.append(string[1])\n",
    "        partei_unter.append(str_part)\n",
    "    else:\n",
    "        pers_unter.append(\"\") # add NULL if no person interrupts\n",
    "        partei_unter.append(\"\")\n",
    "        rede_unter.append(\"\")\n",
    "\n",
    "data[\"Person_Unterbrechung\"] = pers_unter\n",
    "data[\"Partei_Unterbrechung\"] = partei_unter\n",
    "data[\"Redeinhalt_Unterbrechung\"] = rede_unter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ab7a6a5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Redeinhalt</th>\n",
       "      <th>Vortragende_Person</th>\n",
       "      <th>Unterbrechung</th>\n",
       "      <th>Person_Unterbrechung</th>\n",
       "      <th>Partei_Unterbrechung</th>\n",
       "      <th>Redeinhalt_Unterbrechung</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>„Wir waren geistig nicht ausreichend aufs Reg...</td>\n",
       "      <td>Norbert Röttgen</td>\n",
       "      <td>Stern vom 25. November 2010, dapd vom 24. Nove...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Auch das kann man in der EU regeln, Herr Koll...</td>\n",
       "      <td>Valerie Wilms</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Für die Fraktion Die Linke spricht jetzt der ...</td>\n",
       "      <td>Hermann Otto Solms</td>\n",
       "      <td>Beifall bei der LINKEN</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Vielen Dank, Kollege Dr. Gregor Gysi für die ...</td>\n",
       "      <td>Eduard Oswald</td>\n",
       "      <td>Beifall bei der CDU/CSU und der FDP</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Erste Beratung des von der Bundesregierung ein...</td>\n",
       "      <td>Hermann Otto Solms</td>\n",
       "      <td>SozVersStabG</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1362</th>\n",
       "      <td>Der Artikel im Spiegel war falsch. Volker Kau...</td>\n",
       "      <td>Christel Humme</td>\n",
       "      <td>Beifall bei der CDU/CSU</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1363</th>\n",
       "      <td>Die Sitzung ist eröffnet.  Guten Morgen, lieb...</td>\n",
       "      <td>Norbert Lammert</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1364</th>\n",
       "      <td>Das Wort hat nun Carsten Schneider für die SP...</td>\n",
       "      <td>Wolfgang Thierse</td>\n",
       "      <td>Beifall bei der SPD</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1365</th>\n",
       "      <td>Vielen Dank, Frau Kollegin Beate Müller-Gemme...</td>\n",
       "      <td>Eduard Oswald</td>\n",
       "      <td>Beifall bei der CDU/CSU sowie bei Abgeordneten...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1367</th>\n",
       "      <td>– Genau. Der donnernde Beifall des Plenums wi...</td>\n",
       "      <td>Norbert Lammert</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1087 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Redeinhalt   Vortragende_Person  \\\n",
       "0      „Wir waren geistig nicht ausreichend aufs Reg...      Norbert Röttgen   \n",
       "2      Auch das kann man in der EU regeln, Herr Koll...        Valerie Wilms   \n",
       "3      Für die Fraktion Die Linke spricht jetzt der ...   Hermann Otto Solms   \n",
       "4      Vielen Dank, Kollege Dr. Gregor Gysi für die ...        Eduard Oswald   \n",
       "5     Erste Beratung des von der Bundesregierung ein...   Hermann Otto Solms   \n",
       "...                                                 ...                  ...   \n",
       "1362   Der Artikel im Spiegel war falsch. Volker Kau...       Christel Humme   \n",
       "1363   Die Sitzung ist eröffnet.  Guten Morgen, lieb...      Norbert Lammert   \n",
       "1364   Das Wort hat nun Carsten Schneider für die SP...     Wolfgang Thierse   \n",
       "1365   Vielen Dank, Frau Kollegin Beate Müller-Gemme...        Eduard Oswald   \n",
       "1367   – Genau. Der donnernde Beifall des Plenums wi...      Norbert Lammert   \n",
       "\n",
       "                                          Unterbrechung Person_Unterbrechung  \\\n",
       "0     Stern vom 25. November 2010, dapd vom 24. Nove...                        \n",
       "2                                                                              \n",
       "3                                Beifall bei der LINKEN                        \n",
       "4                   Beifall bei der CDU/CSU und der FDP                        \n",
       "5                                          SozVersStabG                        \n",
       "...                                                 ...                  ...   \n",
       "1362                            Beifall bei der CDU/CSU                        \n",
       "1363                                                                           \n",
       "1364                                Beifall bei der SPD                        \n",
       "1365  Beifall bei der CDU/CSU sowie bei Abgeordneten...                        \n",
       "1367                                                                           \n",
       "\n",
       "     Partei_Unterbrechung Redeinhalt_Unterbrechung  \n",
       "0                                                   \n",
       "2                                                   \n",
       "3                                                   \n",
       "4                                                   \n",
       "5                                                   \n",
       "...                   ...                      ...  \n",
       "1362                                                \n",
       "1363                                                \n",
       "1364                                                \n",
       "1365                                                \n",
       "1367                                                \n",
       "\n",
       "[1087 rows x 6 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print new dataframe \n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b122f97",
   "metadata": {},
   "source": [
    "#### 3.2. Datenbereinigung  \n",
    "Für eine genauere Zuordnung der Namen, Geschlechter und Fraktionen zu den Unterbrechungen, werden die Daten (erneut) in diesem Schritt bereinigt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bb0ed5a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleaning person of interruption\n",
    "person_clean = []\n",
    "\n",
    "for person in data[\"Person_Unterbrechung\"]:\n",
    "    new_person = re.sub(\"Dr\\.|Prof\\.|Dr\\.\\sh\\.\\sc\\.|Präsident??|Bundesminister??|Alterspräsident??|Vizepräsident??|Gegenruf des Abg\\.|h\\. c\\.|Gegenruf der Abg\\.\", \"\", person) # remove title\n",
    "    new_person = re.sub(\"Financial Times Deutschland vom 28. September 2011; Spiegel Online\", \"0\", new_person)\n",
    "    new_person = new_person.strip() # remove leading and tailing whitespaces\n",
    "    new_person = re.sub(r'[^\\w\\s]', '', new_person) # remove punctuation\n",
    "    person_clean.append(new_person)\n",
    "\n",
    "data[\"Person_Unterbrechung\"] = person_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5c08431b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'',\n",
       " '0',\n",
       " 'Andreas Mattfeldt',\n",
       " 'Axel Troost',\n",
       " 'Aydan Özoğuz',\n",
       " 'Barbara Höll',\n",
       " 'Bartholomäus Kalb',\n",
       " 'Beifall bei der FDP  Birgitt Bender',\n",
       " 'Beifall bei der SPD  Torsten Staffeldt',\n",
       " 'Britta Haßelmann',\n",
       " 'Bärbel Kofler',\n",
       " 'Carsten Sieling',\n",
       " 'Christian Lange',\n",
       " 'Christian Lindner',\n",
       " 'Christine Scheel',\n",
       " 'Claudia Roth',\n",
       " 'Dagmar Enkelmann',\n",
       " 'Elke Ferner',\n",
       " 'Ernst Dieter Rossmann',\n",
       " 'Ernst Hinsken',\n",
       " 'Florian Pronold',\n",
       " 'Franz Josef Jung',\n",
       " 'Fritz Kuhn',\n",
       " 'Gabriele HillerOhm',\n",
       " 'Garrelt Duin',\n",
       " 'Gegenruf von der FDP',\n",
       " 'Georg Nüßlein',\n",
       " 'Georg Schirmbeck',\n",
       " 'Gernot Erler',\n",
       " 'Gesine Lötzsch',\n",
       " 'Guido Westerwelle r',\n",
       " 'Gustav Herzog',\n",
       " 'Heinrich L Kolb',\n",
       " 'Hermann E Ott',\n",
       " 'Hubertus Heil',\n",
       " 'Iris Gleicke',\n",
       " 'Jens Spahn',\n",
       " 'Jerzy Montag',\n",
       " 'Johann Wadephul',\n",
       " 'Johannes Kahrs',\n",
       " 'Josef Philip Winkler',\n",
       " 'Jörg van Essen',\n",
       " 'Jörn Wunderlich',\n",
       " 'Jürgen Trittin',\n",
       " 'Kerstin Andreae',\n",
       " 'Lisa Paus',\n",
       " 'Martin Burkert',\n",
       " 'Matthias Miersch',\n",
       " 'Michael Brand',\n",
       " 'Michaela Noll',\n",
       " 'Otto Fricke',\n",
       " 'Patrick Kurth',\n",
       " 'Patrick Meinhardt',\n",
       " 'Paul Lehrieder',\n",
       " 'Petra Müller',\n",
       " 'Petra Sitte',\n",
       " 'Philipp Mißfelder',\n",
       " 'Rainer Brüderle',\n",
       " 'Ralph Lenkert',\n",
       " 'Renate Künast',\n",
       " 'René Röspel',\n",
       " 'Rita Pawelski',\n",
       " 'Sigmar Gabriel',\n",
       " 'Stefan Liebich',\n",
       " 'Stefan Müller',\n",
       " 'Stefan Ruppert',\n",
       " 'Sören Bartol',\n",
       " 'Thomas Oppermann',\n",
       " 'Ulrich Kelber',\n",
       " 'Uwe Beckmeyer',\n",
       " 'Volker Beck',\n",
       " 'Volker Kauder',\n",
       " 'Weiterer Zuruf von der CDUCSU',\n",
       " 'Weiterer Zuruf von der SPD',\n",
       " 'Wolfgang Gehrcke',\n",
       " 'Wolfgang Wieland',\n",
       " 'Wolfgang Zöller',\n",
       " 'Zuruf von der CDUCSU',\n",
       " 'Zuruf von der FDP',\n",
       " 'Zurufe',\n",
       " 'Zurufe vom BÜNDNIS 90DIE GRÜNEN',\n",
       " 'Zurufe von der LINKEN',\n",
       " 'Zurufe von der SPD',\n",
       " 'Zurufe von der SPD und dem BÜNDNIS 90 DIE GRÜNEN'}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_clean_person = data[\"Person_Unterbrechung\"].tolist()\n",
    "set(test_clean_person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fff22daa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleaning party from person of interruption\n",
    "party_clean = []\n",
    "\n",
    "for party in data[\"Partei_Unterbrechung\"]:\n",
    "    party = str(party)\n",
    "    new_party = re.sub(r\"\\/\\s\", \"/\", party) # remove whitespace after / \n",
    "    new_party = re.sub(\"Backnang|Augsburg|Köln|Koblenz|Aachen|Peine|Erlangen|Kyffhäuser\", \"\", new_party)\n",
    "    new_party = new_party.strip()\n",
    "    party_clean.append(new_party)\n",
    "\n",
    "data[\"Partei_Unterbrechung\"] = party_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5d9928cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'', 'BÜNDNIS 90/DIE GRÜNEN', 'CDU/CSU', 'DIE LINKE', 'FDP', 'SPD', '[]'}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_clean_party = data[\"Partei_Unterbrechung\"].tolist()\n",
    "set(test_clean_party)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd1f6a2d",
   "metadata": {},
   "source": [
    "#### 3.3. Daten zusammenfügen\n",
    "Die Namen werden nun mit den Stammdaten abgeglichen und verschnitten, sodass die Geschlechter den jeweiligen Personen zugeordnet werden können."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fe89e750",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_clean = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ebc01512",
   "metadata": {},
   "outputs": [],
   "source": [
    "# matching process to indetify gender\n",
    "gender_pers_speach = []\n",
    "\n",
    "for person in data_clean[\"Vortragende_Person\"]:\n",
    "    person = person.strip() # removing leading and trailing whitespaces\n",
    "    if person in names:\n",
    "        index = names.index(person)\n",
    "        geschlecht = geschlechter[index]\n",
    "        gender_pers_speach.append(geschlecht)\n",
    "    else:\n",
    "        gender_pers_speach.append(\"\")\n",
    "\n",
    "data_clean[\"Geschlecht_vort_Pers\"] = gender_pers_speach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4a735266",
   "metadata": {},
   "outputs": [],
   "source": [
    "gender_pers_interruption = []\n",
    "\n",
    "for person in data_clean[\"Person_Unterbrechung\"]:\n",
    "    person = person.strip() # removing leading and trainling whitespaces\n",
    "    if person in names:\n",
    "        index = names.index(person)\n",
    "        geschlecht = geschlechter[index]\n",
    "        gender_pers_interruption.append(geschlecht)\n",
    "    else:\n",
    "        gender_pers_interruption.append(\"\")\n",
    "        \n",
    "data_clean[\"Geschlecht_unterb_Pers\"] = gender_pers_interruption"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "51dfb67d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Redeinhalt</th>\n",
       "      <th>Vortragende_Person</th>\n",
       "      <th>Unterbrechung</th>\n",
       "      <th>Person_Unterbrechung</th>\n",
       "      <th>Partei_Unterbrechung</th>\n",
       "      <th>Redeinhalt_Unterbrechung</th>\n",
       "      <th>Geschlecht_vort_Pers</th>\n",
       "      <th>Geschlecht_unterb_Pers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>„Wir waren geistig nicht ausreichend aufs Reg...</td>\n",
       "      <td>Norbert Röttgen</td>\n",
       "      <td>Stern vom 25. November 2010, dapd vom 24. Nove...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Auch das kann man in der EU regeln, Herr Koll...</td>\n",
       "      <td>Valerie Wilms</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>f</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Für die Fraktion Die Linke spricht jetzt der ...</td>\n",
       "      <td>Hermann Otto Solms</td>\n",
       "      <td>Beifall bei der LINKEN</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Vielen Dank, Kollege Dr. Gregor Gysi für die ...</td>\n",
       "      <td>Eduard Oswald</td>\n",
       "      <td>Beifall bei der CDU/CSU und der FDP</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Erste Beratung des von der Bundesregierung ein...</td>\n",
       "      <td>Hermann Otto Solms</td>\n",
       "      <td>SozVersStabG</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1362</th>\n",
       "      <td>Der Artikel im Spiegel war falsch. Volker Kau...</td>\n",
       "      <td>Christel Humme</td>\n",
       "      <td>Beifall bei der CDU/CSU</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>f</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1363</th>\n",
       "      <td>Die Sitzung ist eröffnet.  Guten Morgen, lieb...</td>\n",
       "      <td>Norbert Lammert</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1364</th>\n",
       "      <td>Das Wort hat nun Carsten Schneider für die SP...</td>\n",
       "      <td>Wolfgang Thierse</td>\n",
       "      <td>Beifall bei der SPD</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1365</th>\n",
       "      <td>Vielen Dank, Frau Kollegin Beate Müller-Gemme...</td>\n",
       "      <td>Eduard Oswald</td>\n",
       "      <td>Beifall bei der CDU/CSU sowie bei Abgeordneten...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1367</th>\n",
       "      <td>– Genau. Der donnernde Beifall des Plenums wi...</td>\n",
       "      <td>Norbert Lammert</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>m</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1087 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Redeinhalt   Vortragende_Person  \\\n",
       "0      „Wir waren geistig nicht ausreichend aufs Reg...      Norbert Röttgen   \n",
       "2      Auch das kann man in der EU regeln, Herr Koll...        Valerie Wilms   \n",
       "3      Für die Fraktion Die Linke spricht jetzt der ...   Hermann Otto Solms   \n",
       "4      Vielen Dank, Kollege Dr. Gregor Gysi für die ...        Eduard Oswald   \n",
       "5     Erste Beratung des von der Bundesregierung ein...   Hermann Otto Solms   \n",
       "...                                                 ...                  ...   \n",
       "1362   Der Artikel im Spiegel war falsch. Volker Kau...       Christel Humme   \n",
       "1363   Die Sitzung ist eröffnet.  Guten Morgen, lieb...      Norbert Lammert   \n",
       "1364   Das Wort hat nun Carsten Schneider für die SP...     Wolfgang Thierse   \n",
       "1365   Vielen Dank, Frau Kollegin Beate Müller-Gemme...        Eduard Oswald   \n",
       "1367   – Genau. Der donnernde Beifall des Plenums wi...      Norbert Lammert   \n",
       "\n",
       "                                          Unterbrechung Person_Unterbrechung  \\\n",
       "0     Stern vom 25. November 2010, dapd vom 24. Nove...                        \n",
       "2                                                                              \n",
       "3                                Beifall bei der LINKEN                        \n",
       "4                   Beifall bei der CDU/CSU und der FDP                        \n",
       "5                                          SozVersStabG                        \n",
       "...                                                 ...                  ...   \n",
       "1362                            Beifall bei der CDU/CSU                        \n",
       "1363                                                                           \n",
       "1364                                Beifall bei der SPD                        \n",
       "1365  Beifall bei der CDU/CSU sowie bei Abgeordneten...                        \n",
       "1367                                                                           \n",
       "\n",
       "     Partei_Unterbrechung Redeinhalt_Unterbrechung Geschlecht_vort_Pers  \\\n",
       "0                                                                     m   \n",
       "2                                                                     f   \n",
       "3                                                                     m   \n",
       "4                                                                     m   \n",
       "5                                                                     m   \n",
       "...                   ...                      ...                  ...   \n",
       "1362                                                                  f   \n",
       "1363                                                                  m   \n",
       "1364                                                                  m   \n",
       "1365                                                                  m   \n",
       "1367                                                                  m   \n",
       "\n",
       "     Geschlecht_unterb_Pers  \n",
       "0                            \n",
       "2                            \n",
       "3                            \n",
       "4                            \n",
       "5                            \n",
       "...                     ...  \n",
       "1362                         \n",
       "1363                         \n",
       "1364                         \n",
       "1365                         \n",
       "1367                         \n",
       "\n",
       "[1087 rows x 8 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_clean"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b5bdc97",
   "metadata": {},
   "source": [
    "### 4. Sentiment Analyse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "659d745f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sent_pol = [] # empty list\n",
    "sent_sub = [] # empty list\n",
    "\n",
    "for row in data_clean[\"Redeinhalt_Unterbrechung\"]:\n",
    "    if row != \"\":\n",
    "        blob = TextBlob(row)\n",
    "        # sentiment analysis\n",
    "        sent_pol.append(blob.sentiment.polarity)\n",
    "        sent_sub.append(blob.sentiment.subjectivity)\n",
    "    else:\n",
    "        sent_pol.append(\"\")\n",
    "        sent_sub.append(\"\")\n",
    "        \n",
    "data_clean[\"Polarity\"] = sent_pol\n",
    "data_clean[\"Subjectivity\"] = sent_sub"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05fb0141",
   "metadata": {},
   "source": [
    "### 5. Auswertung und Analyse der Daten  \n",
    "Mit Hilfe des erzeugten Dataframes können im Anschluss Analysen zur Beantwortung folgender Fragestellungen beantwortet werden:  \n",
    "* Verteilung der Redebeiträge zwischen Männern und Frauen im Verhältnis zur allgemeinen Verteilung der Abgeordneten im Deutschen Bundestag  \n",
    "* Verteilung der Redeunterbrechung zwischen Männern und Frauen  \n",
    "* Die meist unterbrechende Partei (inklusive Geschlecht)  \n",
    "* Relative Verteilung der Geschlechter - Wer unterbricht wen?\n",
    "* Sentiment Analyse der Redeunterbrechungen nach Geschlecht"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "627bdd95",
   "metadata": {},
   "outputs": [],
   "source": [
    "auswertung = data_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "011e37cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "auswertung = auswertung[auswertung[\"Geschlecht_vort_Pers\"] != \"\"] # only if gender is available in data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa6e20da",
   "metadata": {},
   "source": [
    "Durch einen Test wird ermittelt, dass `0 Zeilen` aus den Daten herausgenommen werden, aufgrund eines nicht zuordbaren Geschlechts. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "478627be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_clean) - len(auswertung)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4e8c27b",
   "metadata": {},
   "source": [
    "#### 5.1. Relative und absolute Häufigkeit der Redebeiträge von Männern und Frauen im Deutschen Bundestag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ee9f5391",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Absolute Häufigkeit:\n",
      "   Geschlecht  Absolut\n",
      "0          m      698\n",
      "1          f      389 \n",
      "\n",
      "Relative Häufigkeit:\n",
      "   Geschlecht   Relativ\n",
      "0          m  0.642134\n",
      "1          f  0.357866\n"
     ]
    }
   ],
   "source": [
    "# for not unique values\n",
    "absolute_frequencies = auswertung[\"Geschlecht_vort_Pers\"].value_counts().rename_axis('Geschlecht').reset_index(name=\"Absolut\")\n",
    "relative_frequencies = auswertung[\"Geschlecht_vort_Pers\"].value_counts(normalize=True).rename_axis('Geschlecht').reset_index(name=\"Relativ\")\n",
    "\n",
    "\n",
    "print(\"Absolute Häufigkeit:\\n\",absolute_frequencies,\"\\n\")\n",
    "print(\"Relative Häufigkeit:\\n\",relative_frequencies)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "791253e6",
   "metadata": {},
   "source": [
    "#### 5.2.  Relative und absolute Häufigkeit der Unterbrechungen von Männern und Frauen im Deutschen Bundestag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8315c6da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Absolute Häufigkeit:\n",
      "   Geschlecht  Absolut\n",
      "0          m       71\n",
      "1          f       36 \n",
      "\n",
      "Relative Häufigkeit:\n",
      "   Geschlecht   Relativ\n",
      "0          m  0.663551\n",
      "1          f  0.336449\n"
     ]
    }
   ],
   "source": [
    "# for not unique values\n",
    "interruptions = auswertung[auswertung[\"Geschlecht_unterb_Pers\"] != \"\"]\n",
    "absolute_frequencies_inter = interruptions[\"Geschlecht_unterb_Pers\"].value_counts().rename_axis('Geschlecht').reset_index(name=\"Absolut\")\n",
    "relative_frequencies_inter = interruptions[\"Geschlecht_unterb_Pers\"].value_counts(normalize=True).rename_axis('Geschlecht').reset_index(name=\"Relativ\")\n",
    "\n",
    "print(\"Absolute Häufigkeit:\\n\", absolute_frequencies_inter, \"\\n\")\n",
    "print(\"Relative Häufigkeit:\\n\", relative_frequencies_inter)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13710924",
   "metadata": {},
   "source": [
    "Es ist bereits hier zu erkennen, dass die Verteilung von Männern und Frauen bei den Redebeiträgen und Unterbrechungen sehr ähnlich ist. Grundsätzlich lässt sich erkennen, dass Vorträge häufiger von Männern gehalten werden sowie Unterbrechungen häufiger durch Männer passieren.  \n",
    "Nun sollen die Verteilungen in einer Grafik visualisiert werden."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "21517fcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# concetenate dataframes\n",
    "relative_frequencies[\"Merkmal\"] = \"Redebeitrag\"\n",
    "relative_frequencies_inter[\"Merkmal\"] = \"Unterbrechung\"\n",
    "\n",
    "frames = [relative_frequencies, relative_frequencies_inter]\n",
    "result = pd.concat(frames, ignore_index=True, sort=False)\n",
    "# relative frequencies in percent\n",
    "result[\"Relativ\"] = result[\"Relativ\"]*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e32481a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reform table (wider)\n",
    "result = result.pivot_table(index=[\"Merkmal\"], \n",
    "                    columns=\"Geschlecht\", \n",
    "                    values=\"Relativ\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "14f92e5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Geschlecht</th>\n",
       "      <th>f</th>\n",
       "      <th>m</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Merkmal</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Redebeitrag</th>\n",
       "      <td>35.786569</td>\n",
       "      <td>64.213431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unterbrechung</th>\n",
       "      <td>33.644860</td>\n",
       "      <td>66.355140</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Geschlecht             f          m\n",
       "Merkmal                            \n",
       "Redebeitrag    35.786569  64.213431\n",
       "Unterbrechung  33.644860  66.355140"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d8f58b92",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk0AAAEjCAYAAAAv7DXvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAA62UlEQVR4nO3deXhU5dk/8O83CyEhLBIIEJZECdkx8AaDrCWgSBVF29KCUlzQFt5aq4gFLdWKr62+r3WhlSrWrWoVV3D5WUUbBLECQbawhEVRlH0JEBJilvv3xzmDkzhJTkjCEP1+rmuumTnLc+5z5szMPc/zzHloZhARERGR2oUEOwARERGR5kBJk4iIiIgHSppEREREPFDSJCIiIuKBkiYRERERD5Q0iYiIiHigpKkRkVxE8tqTXLcHySKSoY0dl8ftv03ySvf2dj3XnUJyjxt/jHt/lsd1jWTiScTreRvNVX3Op5M9ju669T6WJIeQLHAfF5AccjLbPp2QvIrkh8GOozYN+Yyp53b+QPLZpt6OSHOjpKkakttJlrhfJLtJPkUyuom2c57vuZl9YWbRZlbRyNsJ+EUQYPs/NLOn3dsP61F+OID7AYx04z/g3n/aOHsQmP823Nfof5pye16QTHCTlyL3tp3kjGDHVZeTOZZmtsTMkt3HyWa2pKnjDCaSw0h+GWB6fRLbKu85EWl+lDQFdrGZRQPoA6AvgFuDG85prROAlgDWBzuQ00g79/z5CYDfkzw/2AE1FpJhwY7h+4iOen1e67USaXxKmmphZrsBvAMneQIAkDyX5EckC0muITks0Loke5L8N8kDJPeTfI5kO3feMwB6AHjDrZH4rV8tRRjJcSTzqpV3E8nX3ccRJO8j+YXbLPYIyciT3U+SKe4vZl+sz/pidedXafrx1UaQTAJQ4E4uJPnv6su7zXVvkDxCcoW7XsAmEJKDSe4gmeM+v4bkRpKHSL5DMr56TCR/AeAKAL91j+UbAcp9hOR91aYtIDnVfZzq7n8hyfUkL6m2rw+TfIvkUZLLSPb0clzNLA9OMtnHr7za9ul8kptIHib5VwCsFnON67ouJPmp+xr+n/+XbEOOpVtDMp3kWgDH3HP0dpKfucdkPclL/coLJflnN47PSF7vO7fd+W1JPk5yF8mv3HMi1J13FckP3fP7kLt+jTWfNZ2b7uNhJL8keTPJve72rvZbNobk6+65uRyAp9e1llj+QPJFkv/wOy793Hnfes+702v8PHHPybtJLgVQDMDXhNqT5HL3PFlAsr27vO8zZBLJLwD43o+1vfbpJBeSPEjns+Q2v11qEWhfGum41/iZQOfzyBdTAcmfVtvOSb0fRRqFmenmdwOwHcB57uNuANYBeMh93hXAAQAXwkk4z3efd3TnLwJwrfs40Z0fAaAjgMUAHgy0Hfd5AgADEAYgCsBRAL385q8AMM59/CCA1wG0B9AawBsA/lTD/lwF4MM69jMFwHAALQDEBojVACT6PX8KwP9UjzvQ8gBecG9RANIA7PCPx7csgAvcednu9EsBbAWQ6h6TmQA+qmEbJ+Kp4RgMdcum+/wMACUA4gCEu9u5zd3/4e6xT/Yr+yCAbDeO5wC8UMN2qhwLAOfC+bK7rK59AtABwBE4tVPhAG4CUI5vzicvxyPXPSd6ANhcz3VrPJZwzpXVALoDiHSn/QxAFzjvg58BOAagiztvMoANcN4/ZwB4r9pxmQ/gUQCt4JxvywH80u98LQNwHYBQAFMA7PS9dgGOeW3n5jD3GM5yj+mF7utxht+5+aIbRwaArxDgveJX1pcBpi/yO85/AHDc3U4ogD8B+LiW97yXz5MvAKS7r1u4O+0rN95WAF4B8Gy18+8f7rzI2l57OJ8duwDcDKe2uDWA/h73paHHPeBnghv3DgBXu/H+F4D9ANLr+37UTbemuAU9gNPt5n6wFcH54jQA78NpbgGA6QCeqbb8OwCudB+f+AANUO6lAFZV207ApMl9/iyA293Hvdx4ouDUPhwD0NNv3QEAPqthu1e5H2CF1W6V/tuvI9aTSprcD9syuAmIO+9/8O2k6VYAnwPo7Tf9bQCT/J6HuB+88dVjQt1JE+F8+Qx1n18H4N/u4yEAdgMI8Vv+eQB/8Cv7737zLgSwqYbt+I5FIZykzADch2+StRr3CcBEVP1SIoAv8c0XspfjMcpv/n8DeL8xjiWcc/WaOt43qwGMcR//G24S5D4/D9/8IOgEoBRu8uXOHw8g1+983eo3L8pdt3MN263ry7sEVc/NvXCSWd+5meI3749oeNL0nt+8NAAltbznvXyezAqwvXuqbeNrd38S3ONxlpf3kXvcV9Wwv3XtS0OPe8DPBDgJ+JJqsTwK4I76vh91060pbmqeC+xSM2sN582fAqcWAHA+aMa6VemFJAsBDIbzi7sKkrEkX3CbH47ASYI6VF+uFv+E86EGAJcDmG9mxXBqraIArPSL4V/u9Jp8bGbt/G9wkojGirUmHeF8Ue7wm7YjwHI3AnjRzNb5TYsH8JDfPh6Ek0h0rW8QZmZwftn6H8/n3MdxAHaYWaXfKp9X285uv8fFAOr6Y0AHd5lpcM6hcHd6bfsUB79j48bsf6y8HA//5T93y/S6bl2qvG4kJ5Jc7VdmBr45Z+JQ82seD+d47PJb91E4NU4+J463e84DdR/zmhwws3K/577XL9C5+Xkt5ZTjm9fRXzicJMCn+rnSkjX3LfLyeRLo/VI95nBUfb96PW+6A9hWQ2z13Zfq6nPcq8fbv9oxuQJA51riavQ/6ojURElTLczsAzi/bHz9YXbA+WXon4C0MrN7Aqz+Jzi/xs42szYAJqBqHxWrY/PvAuhAsg+cL/t/utP3w/kVl+4XQ1tzOh6frLpiLYaTqPn4f4DVZh+cL5tuftO6B1huLIBLSd7oN20HnNoK/2MdaWYfBVi/rmMJOLVHP3H7c/SH06wBOE0/3Vm1k20POE0gJ83MKszsz3CaOP7bnVzbPu2C37EhSVQ9Vl6Oh//yPdx987ruidBr2iW/2OIBPAbgegAxbhKej2/OmV2o+TXfAaemqYNfLG3MLL2G7daloedm9WNWky/gvB9PvM/c1ygetSdb/qofWy+fJ4Fej+oxl8H5XAi0Tm2v/Q6cfD+upvpM2AHgg2rxRpvZlJOMU6RRKWmq24MAzneTl2cBXEzyAjqdXVu6nR67BVivNZxmvkKSXQHcUm3+HnzTsfNb3F9pLwP4Pzj9VBa60yvhfGE9QDIWAEh2JXlBA/axrlhXA7jc3edRAH7gpVBzLp/wKoA/kIwimQKnGaq6nQBGALiBpC/BeATArSTTgROdh8fWsKlaj6Ubyyo4H9h/B/COmRW6s5bBae78LclwtyPuxXBqphrDPW7ZLVH7Pr0FIJ3kj9xf8zeg6heRl+NxC8kzSHYH8BsA8+qxrk+dxxJOvxODczzhdvLN8Jv/IoDfuOdlOzjNUAAAM9sF5wfBn0m2IRlC508Tns6pAFajcc7NNABX1rL8F3DOlXtJRpOMgPM+KQfwscdYqx/b+nye+JtAMo1kFJx+Qy9bzZcqqe21fxNAZ5I30vlzSWuS/T3uy2o0zWfCmwCSSP7cfT+GkzyHZKrHuESalJKmOpjZPjgdK39vZjsAjIHTaXgfnF9FtyDwcbwTTifGw3C+EF+tNv9PAGa6VdDTatj8P+H0B3mpWlX3dDidOz92m9PeA5B8ErvnNdbfwEkkCuFUlc+vR9nXA2gLp0r9GTg1PqXVF3K/lEYAmE7yWjN7DcC9AF5w9zEfQE3/onocQJp7LGuL7Xk4x9NXawcz+xrAJW7Z+wHMATDRzDbVYx9r8xaAQwCuq22fzGw/nBq3e+B0Bu4FYKlfnF6OxwIAK+F8ob0F57h4XdenzmNpZhsA/BnAf+AkAr39Y4WT1L8LYC2AVQD+H5zkwvfFPhFOp/sN7rF5GQGauD1q6LkZDefcfArAk3Us/zM4zYhb4dREjgBwoZkd97i9Ku/5en6e+HvGjXc3nA7cN9S0YB3n3FE4nc8vdsvaAiDH4740yWeCG9NIAOPg/Jja7cYfUY/yRZqMr4OqyClB8l44nXpr/FUv3y10LhnwiJnFBzsWOf3oM0GaE9U0SZOic82Vs+nIBjAJwGvBjkuaDslIkhfSuZ5TVwB3QK+5uPSZIM2ZrhgrTa01nOr3ODh/O/4znGYk+e4inCbfeXD+tPAWgNuDGpGcTvSZIM2WmudETjNuZ/RnzayuDsFBU1eMJJ+Cc12jmQ3YxlVwroE0+GTLEBFpTGqeE/kOoDMESy6doSUO0LmG0nT3X3vfSazHYLkiIo1BSZNIM+f+hfxlOP8KjDezGDj/9OqGwNfFEhGRk6CkSaQB6AxmO43kWjoDqM7z1e6410x6k+Q+OoOlvul/DR6S7Uk+SXKnO39+tbIDDnhabRkCuB/OcBuPmdlBADCzAjP7tZltcZcLITmD5Da3JupFfjPQa0s6gzQfcP8Ov4Jkp8aK0V1uNL+5gvhHJM/2m9ed5KvucTpAZ7Bi/3W/NXgvybvhDIHzVzoD4P4VIiJNTEmTSMP9FMAoAGcCOBvO+GmA8/56Es5Vo3vA6RTt/+X+DJyrKqfDuf7PA37zOsO5lk1XOP8uepjkGQG2nQynRumVAPP83QBnTMEfwOmAewjAw+68K91tdQcQA2fA3ZLGipHkfwF4AsAv3fIfBfC6e0HFUDgXNPwczthpXVH1wqL9ARTAGSbkfwE8TpJm9jsASwBc714x+vo69l9EpMGUNIk03Gwz2+nW8rwBoA8AmNkBM3vFzIrdi/bdDffKySS7wLnI4GQzO2RmZe6wPT5lcGqPyszs/8G5YnugC5j6xhw7MR4XnXEEC0kWk/y5O/mXAH5nZl+aWSmcAVl/Qufq42VwkplEd/iXlWZ2pBFjvA7Ao2a2zC3/aTgXMzwXzmj1cQBuMbNjZnbczD70W/dztwatAsDTcC6C2SnANkREmpwuOSDScNUHEI0DADrDXDwApxbKVwPT2q1d6Q7goJkdqqHMmgY8/dZy7n0XAJ8BgJmNc7f/IZxR5QGntus1kv4DE1fASUCeceN5gc6wJ88C+F0jxhgP4EqSv/ab1gLOcaqAkxiVB1gPqDZ4r9MaqQFaRSQ4VNMk0nRuhlPz0t8dCHmoO51whsxo7yYpDbEJzpAeP6pjuR0AflhtINSWZvaVW1N0p5mlARgIYDScoU4aK8YdAO6utu0oM3vendfDrfGqL10vRUROKSVNIk2nNZy+QYVup+s7fDPcgWvfBjDH7TAeTnJoDeXUyJwLrd0M4A6S17llkWQvVG3GegTA3STjAYBkR5Jj3Mc5JHu7NWBH4DS7VTRWjHDGoptMsr8bWyuSF5FsDWA5gF0A7nGntyQ5yGO5XgYXFhFpNEqaRJrOgwAi4QwE/DGAf1Wb/3M4CcomOFdGvvFkNmJm8+B0Rp8Ap+ZmP4AXAcwF8JK72EMAXgfwLsmjbjy+Ee07w7lkwREAGwF8AKeJrlFiNLM8OP2a/gqnA/pWuJ3l3b5KFwNIBPAFgC/hXC7Bi4fg9Ms6RHJ2feMSEakvXRFcRERExAPVNImIiIh4oKRJRERExAMlTSIiIiIeKGkSERER8UAXtzwFOnToYAkJCcEOQ6SKgt3HAQDJnVsGORJp7soKCwAA4e0CXRD+5K1cuXK/mXVs1EJFGkBJ0ymQkJCAvLy8YIchUsWw/3W+6Bb9tnG/6OT7Z/eCYQCAzmMWNWq5JD9v1AJFGkjNcyIiIiIeKGkSERER8UBJk4iIiIgH6tMkIiLNxsqVK2PDwsL+DiAD+uEvja8SQH55efm1WVlZe6vPVNIkIiLNRlhY2N87d+6c2rFjx0MhISEaB0waVWVlJfft25e2e/fuvwO4pPp8ZekiItKcZHTs2PGIEiZpCiEhIdaxY8fDcGoyvz3/FMcjIiLSECFKmKQpuedXwPxISZOIiIiIB0qaREREGtFdd90Ve80113T3Pb/88svjBw4cmOR7fvfdd8deddVV3QOv/W3PPPNMu5UrVzbapfu7du3ae9euXd/q0zx16tS422+/vVNjbSeQ2bNnx5xxxhmZKSkpaSkpKWmXXXZZQlNur7GpI7iIiEgjGjp0aNGLL74Y43uen58fWVlZyfLycoSFheHjjz9udckllxR6KausrAzz589vV15efjgrK+t4kwV9Cl188cWH/vGPf3wRaF5ZWRnCw8NPdUieqaZJRESkEQ0cOLB4+/btEUVFRTxw4EBoZGRkZUZGRvHy5csjAWDlypXROTk5RR999FFkZmZmSlJSUtr555/fc9++faEAkJ2dnXz99dd3Peecc5JnzpzZ+b333ms3c+bMbikpKWnr16+PyM7OTp40aVL3fv36JZ911lnpH3zwQdTIkSN7xsfHZ9xwww1xvjjmzJnTvnfv3qkpKSlpl19+eXx5efm3Yp0+fXrnhISEjIEDByZt2bIlwjc9Ozs7efHixVEAsGvXrrCuXbv2BpyaopEjR/YcMmRIr/j4+IzJkyd3863zwAMPdEhISMjIzs5OHjduXPzEiRN7eDleU6dOjRs/fnz8oEGDev3oRz86s6CgoEVWVlZyWlpaalpaWurChQtbAcCbb77ZOicnJ9G33sSJE3vMnj07BgCWLFkSdc455ySnp6enDh48uNfnn38e7tuPKVOmdO3du3dqQkJCxr/+9a/oeryU36KaJhERaZaueXJ79/yvSqIas8yMrpHFT1ydsKO2ZaZOnRqXm5vbJiQkxFJTU0vS09NLbr311n2++eHh4UhNTS1ZsmRJq+Li4pCsrKxjvXr1Kl28eHF0XFxcuZkhMTGx7MILL+z1wAMPfHHRRRcV3XjjjXHTp0+Pe+KJJ3YAQGFhYeiKFSsKAGDr1q0tR48effjqq68+5NtGixYtKvPy8gruuuuu2LFjxyauWLFiY2xsbHlCQkLv2267bc/OnTvDX3755fZ5eXmbIiIibMKECT0eeeSRmOuvv/6Ar4wlS5ZEvfbaa+3XrVu3oaysDH369Enr27dvcV3HaMOGDVFr1qzZEBkZWZmYmJgxbdq0PWFhYbjvvvu6fPLJJxvatWtXOXDgwKT09PSSQOu/8cYbZ6SkpEQDwJQpU/YAwNq1a6OWLVu2KTo62o4ePRqyZMmSzVFRUbZu3bqI8ePHn5Wfn7+xpnhKS0t5ww039Hjrrbe2xsXFlT/22GNnTJs2retLL720HQDKy8u5bt26jfPmzWs7a9asuFGjRm2uax9roqRJRETEo4cffrg9AKxatWrTQw89FPPYY4/Fjhgx4mj15fr371+0ZMmS6JKSkpCBAwceS01NPT5r1qwusbGx5VlZWccOHDgQevTo0dCLLrqoCACuu+66A2PHjj3Lt/748eMP1hbHZZddVggAmZmZJYmJiSXx8fFlANC9e/fSTz/9tMWiRYui8/PzozIzM1MB4Pjx4yGxsbFVqppyc3OjL7zwwsLWrVtXAsDIkSMLvRyDwYMHH4mJiakAgMTExOPbtm2L2Lt3b1j//v2PdurUqcKN79DmzZsD9sOq3jw3derUuFGjRhVGR0cbAHz99decNGlS/IYNGyJDQkLw+eefRwQqx2ft2rURW7ZsiRw+fHgSAFRWVqJjx45lvvljx449BAADBw48dsstt7Twso81UdIkIiLNUl01Qk1h2bJl0XfeeeeuGTNmdC4vL+eCBQu2zpo1q7N/LRAADBo0qGju3LkdS0tLOW3atL1dunQp37JlS8ulS5dGDxgwoKiu7fgSmZq0bNnSACAkJAQREREnLsEQEhKC8vJymhnHjh174OGHH/6qtnJIBpweFhZmFRUVAIDi4uIqC7Vo0eLE9kJDQ62srIxmDbsKRKtWrU7s7913390pNja27JVXXvmssrISkZGRWQAQHh5ulZXfHJbS0lICgJkxMTGxZPXq1ZsCle07VmFhYaioqAi8wx6pT5OIiIhHOTk5R8eMGdMzNja2/L777ts1Z86cDueee+6x6suNGDGiaPXq1a0OHjwY3rVr1/KQkBC0b9++/J133mk3dOjQopiYmIo2bdpU+PrYPP744zE1JVPR0dEVR44cqdf39ahRo468+eabZ3z11VdhALBnz57QzZs3V6llGT58eNFbb73VrqioiIcOHQpZuHBhO9+87t27ly5fvrwVADz33HNn1LW9IUOGHFu2bFnrffv2hZaVlWHBggV1rlOTw4cPh3bp0qUsNDQUc+bMifElbz179izdunVrZElJCQ8cOBD64YcftgGAs88++/jBgwfD3nvvvVaAk0zl5eU12r8N/SlpEhER8Wj//v2hvXv3Ln7uuedi+vbtm0ISU6ZM+VZTWseOHSvat29fnpSUdKJfT3Z29rGDBw+GnXvuucUA8OSTT342ffr0bklJSWlr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c+d+GewYmppqmkREREQ8UNIkIiIi4oGSJhEREREPlDSJiIiIeKCO4CIi0mzlPI6sxiwvdxJW1rVMaGhoVq9evU5cf2nBggVbk5OTv27MOOT0pKRJRESkHiIiIio3bdq0IdC8yspKmBlCQ0NPdVhyCqh5TkREpAEKCgpanHXWWekTJkzokZ6enrZt27YWV1xxRY+MjIzUxMTE9JtuuinOt2zXrl1779q1KwwAFi9eHJWdnZ0MAEeOHAkZO3ZsQkZGRmpqamras88+2w4AZs+eHTNy5MieQ4YM6RUfH58xefLkbkHZSQGgpElERKReSktLQ1JSUtJSUlLSzj///J4AsH379pZXX331gY0bN25ISkr6+v777/8qPz9/46ZNm9YvXbq09bJlyyJrK/O2227rkpOTcyQ/P3/jkiVLCmbOnNnNN97chg0boubPn//pxo0b17/++utnbN26Nby2sqTpqHlORESkHqo3zxUUFLTo0qXL1yNGjDgxTtrTTz/d/qmnnupQXl7Offv2ha9Zs6Zl//79SwKXCCxatKjNO++802727NmdAaC0tJRbt25tAQCDBw8+EhMTUwEAiYmJx7dt2xaRmJhY1nR7KDVR0iQiItJAUVFRlb7HmzZtavHXv/6108qVKzd27Nix4sc//nHC8ePHQwAgNDTUKiudRUtKSk609pgZXn755a2ZmZml/uV++OGHrVq0aHFikNjQ0FArKytjk++QBKTmORERkUZ06NCh0MjIyMr27dtX7NixI2zRokVtffO6dev29dKlS6MA4MUXXzzDNz0nJ+fIn//8506+hGrp0qW1NudJcKimSUREmi0vlwg41QYMGFCSkZFR3KtXr/QePXqUZmVlFfnm3X777TsnT56ccO+995ZlZWWdaM675557dv7iF7/okZKSkmZm7NatW2lubu7W4OyB1IRmVvdS0iD9kltb3iP9gh2GSBXDFk4BACw6/29BjkSau92frwIAdI7vW3VGTm6DyiW50syqfHiuWbNme2Zm5v4GFSxShzVr1nTIzMxMqD5dzXMiIiIiHihpEhEREfFASZOIiIiIB0qaRERERDxQ0iQiIiLigZImEREREQ90nSYREWm+cnOyGrW8nNw6r/tEMmvMmDEH58+f/xkAlJWVITY2NrNPnz7HfNdW+sEPfpD4yiuvfHb++ef3WrVq1aZGjVGCps6a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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# data visualization\n",
    "mean_freq_fem = result[\"f\"].mean()\n",
    "mean_freq_men = result[\"m\"].mean()\n",
    "\n",
    "# plotting a bar chart\n",
    "result.plot(kind = \"barh\",\n",
    "        width = 0.7, color = [\"#409cff\", \"#ffbe40\"])\n",
    "\n",
    "plt.axvline(x = mean_freq_fem, color = \"#0063CC\") # vertical line mean female\n",
    "plt.axvline(x = mean_freq_men, color = \"#E09600\") # vertical line mean men\n",
    "plt.xlabel(\"in Prozent\") # naming the x-axis\n",
    "plt.ylabel(\"\") # naming the y-axis\n",
    "plt.title(\"nach Geschlecht\") # plot title\n",
    "plt.suptitle(\"Relative Häufigkeit von Redebeiträgen und Unterbrechungen\") # plot title\n",
    "plt.legend([\"⌀ Wortmeldung Frauen\", \"⌀ Wortmeldung Männer\", \"Frauen\", \"Männer\"], loc=\"upper left\", bbox_to_anchor=(1,1))\n",
    "  \n",
    "plt.show() # show plot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9fd8821",
   "metadata": {},
   "source": [
    "In dieser Grafik werden die relativen Häufigkeiten von Redebeiträgen und Unterbrechungen nach Geschlecht aufgezeigt. Die vertikalen Linien zeigen den durchschnittlichen Wortbeitrag von Frauen sowie Männern insgesamt. Die Differenz des durchschnittlichen Anteils liegt bei rund 32 Prozent, was eine hohe Differenz darstellt. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37110ea2",
   "metadata": {},
   "source": [
    "#### 5.3. Die meist unterbrechende Partei (inklusive Geschlecht) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c59742f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "party_inter = auswertung[auswertung[\"Geschlecht_unterb_Pers\"] != \"\"] # only if gender is available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f1fd81f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "party_inter = party_inter.groupby([\"Partei_Unterbrechung\", \"Geschlecht_unterb_Pers\"]).size().reset_index(name='Anzahl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "84f88821",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reform table (wider)\n",
    "party_inter_res = party_inter.pivot_table(index=[\"Partei_Unterbrechung\"], \n",
    "                    columns=\"Geschlecht_unterb_Pers\", \n",
    "                    values=\"Anzahl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9cfbd9fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Geschlecht_unterb_Pers</th>\n",
       "      <th>f</th>\n",
       "      <th>m</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Partei_Unterbrechung</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>BÜNDNIS 90/DIE GRÜNEN</th>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CDU/CSU</th>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIE LINKE</th>\n",
       "      <td>18</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FDP</th>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPD</th>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Geschlecht_unterb_Pers   f   m\n",
       "Partei_Unterbrechung          \n",
       "BÜNDNIS 90/DIE GRÜNEN   10  12\n",
       "CDU/CSU                  2  19\n",
       "DIE LINKE               18   6\n",
       "FDP                      2  10\n",
       "SPD                      4  24"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "party_inter_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7b159f8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# data visualization\n",
    "mean_freq_fem2 = party_inter_res[\"f\"].mean() # for row average\n",
    "mean_freq_men2 = party_inter_res[\"m\"].mean()\n",
    "\n",
    "# plotting a bar chart\n",
    "party_inter_res.plot(kind = \"bar\",\n",
    "        width = 0.7, color = [\"#409cff\", \"#ffbe40\"])\n",
    "\n",
    "plt.axhline(y=mean_freq_fem2, color= \"#0063CC\") # average frequency female\n",
    "plt.axhline(y=mean_freq_men2, color= \"#E09600\") # average frequency men\n",
    "plt.xlabel(\"\") # naming the x-axis\n",
    "plt.ylabel(\"Absolute Anzahl\") # naming the y-axis\n",
    "plt.title(\"nach Partei und Geschlecht\") # plot title\n",
    "plt.suptitle(\"Absolute Häufigkeit von Unterbrechungen\") # plot title\n",
    "plt.legend([\"⌀ Wortmeldung Frauen\", \"⌀ Wortmeldung Männer\", \"Frauen\", \"Männer\"], loc=\"upper left\", bbox_to_anchor=(1,1))\n",
    "  \n",
    "plt.show() # show plot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c341ad86",
   "metadata": {},
   "source": [
    "In dieser Grafik ist gut zu erkennen, dass in der Partei \"Die Linke\" eindeutig mehr Frauen die Redebeiträge unterbrechen. Der Durchschnitt zeigt erneut, dass grundsätzlich mehr Männer die Redebeiträge unterbrechen. In der Partei \"Bündis 90/Die Grünen) sind die absoluten Anzahlen relativ ähnlich.  \n",
    "Die Partei, die die meisten Wortunterbrechungen hat ist SPD, die FDP hält sich im Gegensatz dazu sehr zurück."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c41c07a5",
   "metadata": {},
   "source": [
    "#### 5.4. Relative Verteilung der Geschlechter - Wer unterbricht wen? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0c4e402a",
   "metadata": {},
   "outputs": [],
   "source": [
    "gender_inter = auswertung[auswertung[\"Geschlecht_unterb_Pers\"] != \"\"] # only if gender is available\n",
    "gender_inter = gender_inter.groupby([\"Geschlecht_unterb_Pers\", \"Geschlecht_vort_Pers\"]).size().reset_index(name='Anzahl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "41dbcca1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Geschlecht_unterb_Pers</th>\n",
       "      <th>Geschlecht_vort_Pers</th>\n",
       "      <th>Anzahl</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f</td>\n",
       "      <td>m</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>m</td>\n",
       "      <td>f</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>m</td>\n",
       "      <td>m</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Geschlecht_unterb_Pers Geschlecht_vort_Pers  Anzahl\n",
       "0                      f                    f      14\n",
       "1                      f                    m      22\n",
       "2                      m                    f      23\n",
       "3                      m                    m      48"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_inter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a5752b32",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\annes\\AppData\\Local\\Temp/ipykernel_11956/1984627187.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  fems[\"Relativ\"] = rel_freq_f\n",
      "C:\\Users\\annes\\AppData\\Local\\Temp/ipykernel_11956/1984627187.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  men[\"Relativ\"] = rel_freq_m\n"
     ]
    }
   ],
   "source": [
    "# calculate relative frequency\n",
    "fems = gender_inter[gender_inter[\"Geschlecht_unterb_Pers\"] == \"f\"]\n",
    "men = gender_inter[gender_inter[\"Geschlecht_unterb_Pers\"] == \"m\"]\n",
    "\n",
    "total_num_f = fems.Anzahl.sum()\n",
    "total_num_m = men.Anzahl.sum()\n",
    "\n",
    "rel_freq_f = []\n",
    "for n in fems[\"Anzahl\"]:\n",
    "    num_f = n/total_num_f*100\n",
    "    rel_freq_f.append(num_f)\n",
    "\n",
    "rel_freq_m = []\n",
    "for n in men[\"Anzahl\"]:\n",
    "    num_m = n/total_num_m*100\n",
    "    rel_freq_m.append(num_m)\n",
    "    \n",
    "\n",
    "fems[\"Relativ\"] = rel_freq_f\n",
    "men[\"Relativ\"] = rel_freq_m \n",
    "\n",
    "# to drop column \"Anzahl\" and \"Geschlecht_unterb_Pers\"\n",
    "fems = fems.drop([\"Anzahl\", \"Geschlecht_unterb_Pers\"], axis=1)\n",
    "men = men.drop([\"Anzahl\", \"Geschlecht_unterb_Pers\"], axis=1) # to drop column \"Anzahl\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "57536047",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Geschlecht_vort_Pers</th>\n",
       "      <th>Relativ</th>\n",
       "      <th>Wird_unterbrochen_von</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>f</td>\n",
       "      <td>38.888889</td>\n",
       "      <td>Frau</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>m</td>\n",
       "      <td>61.111111</td>\n",
       "      <td>Frau</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>f</td>\n",
       "      <td>32.394366</td>\n",
       "      <td>Mann</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>m</td>\n",
       "      <td>67.605634</td>\n",
       "      <td>Mann</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Geschlecht_vort_Pers    Relativ Wird_unterbrochen_von\n",
       "0                    f  38.888889                  Frau\n",
       "1                    m  61.111111                  Frau\n",
       "2                    f  32.394366                  Mann\n",
       "3                    m  67.605634                  Mann"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concetenate dataframes\n",
    "fems[\"Wird_unterbrochen_von\"] = \"Frau\"\n",
    "men[\"Wird_unterbrochen_von\"] = \"Mann\"\n",
    "\n",
    "frames = [fems, men]\n",
    "result_genders = pd.concat(frames, ignore_index=True, sort=False)\n",
    "result_genders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "217b87b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reform table (wider)\n",
    "result_genders = result_genders.pivot_table(index=[\"Wird_unterbrochen_von\"], \n",
    "                    columns=\"Geschlecht_vort_Pers\", \n",
    "                    values=\"Relativ\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "388b9cee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Geschlecht_vort_Pers</th>\n",
       "      <th>f</th>\n",
       "      <th>m</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wird_unterbrochen_von</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Frau</th>\n",
       "      <td>38.888889</td>\n",
       "      <td>61.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mann</th>\n",
       "      <td>32.394366</td>\n",
       "      <td>67.605634</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Geschlecht_vort_Pers           f          m\n",
       "Wird_unterbrochen_von                      \n",
       "Frau                   38.888889  61.111111\n",
       "Mann                   32.394366  67.605634"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_genders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "105dc3ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# data visualization\n",
    "mean_freq_inter_fem = result_genders[\"f\"].mean() # for row average\n",
    "mean_freq_inter_men = result_genders[\"m\"].mean()\n",
    "\n",
    "# plotting a bar chart\n",
    "result_genders.plot(kind = \"bar\",\n",
    "        width = 0.7, color = [\"#409cff\", \"#ffbe40\"])\n",
    "\n",
    "plt.axhline(y=mean_freq_inter_fem, color= \"#0063CC\") # average frequency female\n",
    "plt.axhline(y=mean_freq_inter_men, color= \"#E09600\") # average frequency men\n",
    "plt.xlabel(\"Wird unterbrochen von\") # naming the x-axis\n",
    "plt.ylabel(\"in Prozent\") # naming the y-axis\n",
    "plt.title(\"nach Partei und Geschlecht\") # plot title\n",
    "plt.suptitle(\"Absolute Häufigkeit von Unterbrechungen\") # plot title\n",
    "plt.legend([\"⌀ Unterbrochener Männer\", \"⌀ Unterbrochener Frauen\", \"Frauen\", \"Männer\"], loc=\"upper left\", bbox_to_anchor=(1,1))\n",
    "  \n",
    "plt.show() # show plot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ade86c9",
   "metadata": {},
   "source": [
    "Es ist zu erkennen, dass Männer durchschnittlich häufiger unterbrochen werden als Frauen. Hierbei zeigt die Grafik, dass sowohl Männer das gleiche Geschlecht, als auch Frauen Männer häufiger unterbrechen."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7acd27c",
   "metadata": {},
   "source": [
    "#### 5.5. Sentiment Analyse der Redeunterbrechungen nach Geschlecht"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "296099ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sentiment tendencies of interruption\n",
    "# above 0.5 = positive\n",
    "# 0.0 = neutral\n",
    "# below -0.49  = negative\n",
    "tendency = []\n",
    "for p in auswertung[\"Polarity\"]:\n",
    "    if p != \"\":\n",
    "        if p > 0.0:\n",
    "            sent = \"positive\"\n",
    "            tendency.append(sent)\n",
    "        elif p == 0.0:\n",
    "            sent = \"neutral\"\n",
    "            tendency.append(sent)\n",
    "        else:\n",
    "            sent = \"negative\"\n",
    "            tendency.append(sent)\n",
    "    else:\n",
    "        tendency.append(\"\")\n",
    "\n",
    "auswertung[\"Sentiment_Tendenz\"] = tendency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "3d55635c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sentiment_notNull = auswertung[auswertung[\"Sentiment_Tendenz\"] != \"\"]\n",
    "sentiment_notNull = sentiment_notNull[sentiment_notNull[\"Geschlecht_unterb_Pers\"] != \"\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "918a571f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sentiment = sentiment_notNull.groupby([\"Geschlecht_unterb_Pers\", \"Sentiment_Tendenz\"]).size().reset_index(name='Anzahl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "36768916",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\annes\\AppData\\Local\\Temp/ipykernel_11956/3265206689.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  fems[\"Anteil\"] = rel_freq_f\n",
      "C:\\Users\\annes\\AppData\\Local\\Temp/ipykernel_11956/3265206689.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  men[\"Anteil\"] = rel_freq_m\n"
     ]
    }
   ],
   "source": [
    "# calculate relative frequency\n",
    "fems = sentiment[sentiment[\"Geschlecht_unterb_Pers\"] == \"f\"]\n",
    "men = sentiment[sentiment[\"Geschlecht_unterb_Pers\"] == \"m\"]\n",
    "\n",
    "total_num_f = fems.Anzahl.sum()\n",
    "total_num_m = men.Anzahl.sum()\n",
    "\n",
    "rel_freq_f = []\n",
    "for n in fems[\"Anzahl\"]:\n",
    "    num_f = n/total_num_f*100\n",
    "    rel_freq_f.append(num_f)\n",
    "\n",
    "rel_freq_m = []\n",
    "for n in men[\"Anzahl\"]:\n",
    "    num_m = n/total_num_m*100\n",
    "    rel_freq_m.append(num_m)\n",
    "    \n",
    "\n",
    "fems[\"Anteil\"] = rel_freq_f\n",
    "men[\"Anteil\"] = rel_freq_m "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ff6398fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Geschlecht_unterb_Pers</th>\n",
       "      <th>Sentiment_Tendenz</th>\n",
       "      <th>Anzahl</th>\n",
       "      <th>Anteil</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>f</td>\n",
       "      <td>negative</td>\n",
       "      <td>1</td>\n",
       "      <td>2.777778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f</td>\n",
       "      <td>neutral</td>\n",
       "      <td>23</td>\n",
       "      <td>63.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>f</td>\n",
       "      <td>positive</td>\n",
       "      <td>12</td>\n",
       "      <td>33.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>m</td>\n",
       "      <td>negative</td>\n",
       "      <td>8</td>\n",
       "      <td>11.267606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>m</td>\n",
       "      <td>neutral</td>\n",
       "      <td>48</td>\n",
       "      <td>67.605634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>m</td>\n",
       "      <td>positive</td>\n",
       "      <td>15</td>\n",
       "      <td>21.126761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Geschlecht_unterb_Pers Sentiment_Tendenz  Anzahl     Anteil\n",
       "0                      f          negative       1   2.777778\n",
       "1                      f           neutral      23  63.888889\n",
       "2                      f          positive      12  33.333333\n",
       "3                      m          negative       8  11.267606\n",
       "4                      m           neutral      48  67.605634\n",
       "5                      m          positive      15  21.126761"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concetenate dataframes\n",
    "frames = [fems, men]\n",
    "sentiment_res = pd.concat(frames, ignore_index=True, sort=False)\n",
    "sentiment_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d6444640",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reform table (wider)\n",
    "sentiment_res = sentiment_res.pivot_table(index=[\"Sentiment_Tendenz\"], \n",
    "                    columns=\"Geschlecht_unterb_Pers\", \n",
    "                    values=\"Anteil\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "683810e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Geschlecht_unterb_Pers</th>\n",
       "      <th>f</th>\n",
       "      <th>m</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sentiment_Tendenz</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>2.777778</td>\n",
       "      <td>11.267606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neutral</th>\n",
       "      <td>63.888889</td>\n",
       "      <td>67.605634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>33.333333</td>\n",
       "      <td>21.126761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Geschlecht_unterb_Pers          f          m\n",
       "Sentiment_Tendenz                           \n",
       "negative                 2.777778  11.267606\n",
       "neutral                 63.888889  67.605634\n",
       "positive                33.333333  21.126761"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentiment_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "91733590",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# data visualization\n",
    "# plotting a bar chart\n",
    "sentiment_res.plot(kind = \"barh\",\n",
    "        width = 0.7, color = [\"#409cff\", \"#ffbe40\"])\n",
    "\n",
    "plt.xlabel(\"in Prozent\") # naming the x-axis\n",
    "plt.ylabel(\"\") # naming the y-axis\n",
    "plt.title(\"nach Geschlecht\") # plot title\n",
    "plt.suptitle(\"Relative Häufigkeit der Stimmungsanalyse\") # plot title\n",
    "plt.legend([\"Frauen\", \"Männer\"], loc=\"upper left\", bbox_to_anchor=(1,1))\n",
    "  \n",
    "plt.show() # show plot"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
